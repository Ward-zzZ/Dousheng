// Code generated by hertz generator.

package ApiServer

import (
	"context"
	"sync"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	mw "tiktok-demo/cmd/api/biz/middleware"
	ApiServer "tiktok-demo/cmd/api/biz/model/ApiServer"
	"tiktok-demo/cmd/api/config"
	"tiktok-demo/cmd/api/pkg"
	Globalconsts "tiktok-demo/shared/consts"
	"tiktok-demo/shared/errno"
	"tiktok-demo/shared/kitex_gen/RelationServer"

	"tiktok-demo/shared/kitex_gen/UserServer"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinUserRegisterRequest
	var userRpcResp *UserServer.DouyinUserRegisterResponse
	var token string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// call register service
	userRpcResp, err = config.GlobalUserClient.Register(ctx, &UserServer.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Error("Rpc user register failed", err)
		pkg.SendRegisterResponse(c, err, -1, "")
		return
	}

	// generate token
	token, _, err = mw.JwtMiddleware.TokenGenerator(userRpcResp.UserId)
	if err != nil {
		pkg.SendRegisterResponse(c, err, -1, "")
		return
	}

	// success
	pkg.SendRegisterResponse(c, errno.Success, userRpcResp.UserId, token)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	// first excute Authenticator, if failed, then excute unauthorized&HTTPStatusMessageFunc
	// then create token
	// if PayloadFunc is not nil, then excute PayloadFunc
	// finally excute LoginResponse to return info
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var wg sync.WaitGroup
	var u = new(UserServer.User)
	var isFollow = false

	// using goroutine to call user service and relation service
	wg.Add(2)
	go func() {
		resp, err := config.GlobalUserClient.GetUserInfo(ctx, &UserServer.DouyinUserRequest{
			UserId: req.UserId,
		})
		if resp.BaseResp.StatusCode != 0 {
			hlog.Error("Rpc user get user info failed:", err)
		}
		u = resp.User
		wg.Done()
	}()
	go func() {
		v, _ := c.Get(Globalconsts.IdentityKey)
		resp, err := config.GlobalRelationClient.QueryRelation(ctx, &RelationServer.DouyinQueryRelationRequest{
			UserId:   v.(*ApiServer.User).Id,
			ToUserId: req.UserId})
		if resp.BaseResp.StatusCode != 0 {
			hlog.Error("Rpc relation query relation failed:", err)
		}
		isFollow = resp.IsFollow
		wg.Done()
	}()
	wg.Wait()

	// if error, return default user info
	if u == nil {
		pkg.SendUesrInfoResponse(c, errno.FuncErr, u, isFollow)
		return
	}
	pkg.SendUesrInfoResponse(c, errno.Success, u, isFollow)
}
