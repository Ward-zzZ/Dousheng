// Code generated by hertz generator.

package ApiServer

import (
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"

	ApiServer "tiktok-demo/cmd/api/biz/model/ApiServer"
	"tiktok-demo/cmd/api/pkg"

	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/cloudwego/hertz/pkg/common/hlog"
	// mw "tiktok-demo/cmd/api/biz/middleware"
	"tiktok-demo/cmd/api/config"
	// "tiktok-demo/cmd/api/pkg"
	Globalconsts "tiktok-demo/shared/consts"
	"tiktok-demo/shared/errno"
	// "tiktok-demo/shared/errno"
	// "tiktok-demo/shared/kitex_gen/CommentServer"
	// "tiktok-demo/shared/kitex_gen/FavoriteServer"
	"tiktok-demo/shared/kitex_gen/RelationServer"
	// "tiktok-demo/shared/kitex_gen/UserServer"
	// "tiktok-demo/shared/kitex_gen/VideoServer"
	// "tiktok-demo/shared/tools"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationActionRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	tid, err := strconv.ParseInt(c.Query("to_user_id"), 10, 64)
	if err != nil {
		respErr := errno.NewErrNo(errno.ParamErrCode, "to_user_id 不合法")
		hlog.Error("param to_user_id is invalid", respErr)
		pkg.SendRelationActionResponse(c, respErr)
		return
	}
	actionType, err := strconv.ParseInt(c.Query("action_type"), 10, 64)
	if err != nil || (actionType != 1 && actionType != 2) {
		respErr := errno.NewErrNo(errno.ParamErrCode, "action_type 不合法")
		hlog.Error("param action_type is invalid", respErr)
		pkg.SendRelationActionResponse(c, respErr)
		return
	}
	token := c.Query("token")
	if token == "" {
		respErr := errno.NewErrNo(errno.ParamErrCode, "token 不合法")
		hlog.Error("param token is invalid", respErr)
		pkg.SendRelationActionResponse(c, respErr)
		return
	}
	req.Token = token
	req.ToUserId = tid
	req.ActionType = int32(actionType)

	// get user id after jwt middleware
	user, _ := c.Get(Globalconsts.IdentityKey)
	// call RPC: relation action service
	resp, _ := config.GlobalRelationClient.RelationAction(ctx, &RelationServer.DouyinRelationActionRequest{
		UserId:     user.(*ApiServer.User).Id,
		ToUserId:   req.ToUserId,
		ActionType: req.ActionType,
	})
	if resp.BaseResp.StatusCode != 0 {
		respErr := errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		hlog.Error("Rpc relation action failed", respErr)
		pkg.SendRelationActionResponse(c, respErr)
		return
	}
	pkg.SendRelationActionResponse(c, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// call RPC: relation follow list service
	resp, _ := config.GlobalRelationClient.MGetRelationFollowList(ctx, &RelationServer.DouyinRelationFollowListRequest{
		UserId: req.UserId,
	})
	if resp.BaseResp.StatusCode != 0 {
		respErr := errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		hlog.Error("Rpc relation follow list failed", respErr)
		pkg.SendRelationListResponse(c, respErr)
		return
	}
	pkg.SendRelationListResponse(c, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// call RPC: relation follower list service
	resp, _ := config.GlobalRelationClient.MGetUserRelationFollowerList(ctx, &RelationServer.DouyinRelationFollowerListRequest{
		UserId: req.UserId,
	})
	if resp.BaseResp.StatusCode != 0 {
		respErr := errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		hlog.Error("Rpc relation follower list failed", respErr)
		pkg.SendRelationListResponse(c, respErr)
		return
	}
	pkg.SendRelationListResponse(c, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	user, _ := c.Get(Globalconsts.IdentityKey)

	// call RPC: relation friend list service
	resp, _ := config.GlobalRelationClient.MGetRelationFriendList(ctx, &RelationServer.DouyinRelationFriendListRequest{
		UserId: user.(*ApiServer.User).Id,
	})

	if resp.BaseResp.StatusCode != 0 {
		respErr := errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		hlog.Error("Rpc relation friend list failed", respErr)
		pkg.SendFriendListResponse(c, respErr)
		return
	}

	pkg.SendFriendListResponse(c, resp)
}
