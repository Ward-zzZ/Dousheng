// Code generated by hertz generator.

package ApiServer

import (
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"

	ApiServer "tiktok-demo/cmd/api/biz/model/ApiServer"
	"tiktok-demo/cmd/api/config"
	"tiktok-demo/cmd/api/pkg"
	Globalconsts "tiktok-demo/shared/consts"
	"tiktok-demo/shared/errno"
	"tiktok-demo/shared/kitex_gen/MessageServer"
)

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinMessageChatRequest

	tid, err := strconv.ParseInt(c.Query("to_user_id"), 10, 64)
	if err != nil {
		respErr := errno.NewErrNo(errno.ParamErrCode, "to_user_id 不合法")
		hlog.Error("param to_user_id is invalid", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	pre_msg_time, err := strconv.ParseInt(c.Query("pre_msg_time"), 10, 64)
	if err != nil {
		respErr := errno.NewErrNo(errno.ParamErrCode, "pre_msg_time 不合法")
		hlog.Error("param pre_msg_time is invalid", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	token := c.Query("token")
	if token == "" {
		respErr := errno.NewErrNo(errno.ParamErrCode, "token 不合法")
		hlog.Error("param token is invalid", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	req.Token = token
	req.ToUserId = tid
	req.PreMsgTime = pre_msg_time

	user, _ := c.Get(Globalconsts.IdentityKey)

	resp, _ := config.GlobalMessageClient.MessageChat(ctx, &MessageServer.DouyinMessageChatRequest{
		UserId:     user.(*ApiServer.User).Id,
		ToUserId:   req.ToUserId,
		PreMsgTime: req.PreMsgTime,
	})
	if resp.BaseResp.StatusCode != 0 {
		respErr := errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		hlog.Error("Rpc relation action failed", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	pkg.SendMessageChatResponse(c, resp)

}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinMessageActionRequest

	tid, err := strconv.ParseInt(c.Query("to_user_id"), 10, 64)
	if err != nil {
		respErr := errno.NewErrNo(errno.ParamErrCode, "to_user_id 不合法")
		hlog.Error("param to_user_id is invalid", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	action_type, err := strconv.ParseInt(c.Query("action_type"), 10, 64)
	if err != nil || (action_type != 1 && action_type != 2) {
		respErr := errno.NewErrNo(errno.ParamErrCode, "action_type 不合法")
		hlog.Error("param action_type is invalid", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	token := c.Query("token")
	if token == "" {
		respErr := errno.NewErrNo(errno.ParamErrCode, "token 不合法")
		hlog.Error("param token is invalid", respErr)
		pkg.SendMessageChatResponse(c, respErr)
		return
	}
	content := c.Query("content")
	req.Token = token
	req.ToUserId = tid
	req.ActionType = int32(action_type)
	req.Content = content

	user, _ := c.Get(Globalconsts.IdentityKey)

	resp, _ := config.GlobalMessageClient.MessageAction(ctx, &MessageServer.DouyinMessageActionRequest{
		UserId:     user.(*ApiServer.User).Id,
		ToUserId:   req.ToUserId,
		ActionType: req.ActionType,
		Content:    req.Content,
	})

	if resp.BaseResp.StatusCode != 0 {
		respErr := errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		hlog.Error("Rpc relation action failed", respErr)
		pkg.SendMessageActionResponse(c, respErr)
		return
	}
	pkg.SendMessageActionResponse(c, resp)
}
