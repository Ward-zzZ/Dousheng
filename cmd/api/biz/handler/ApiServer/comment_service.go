// Code generated by hertz generator.

package ApiServer

import (
	"context"
	"strconv"

	ApiServer "tiktok-demo/cmd/api/biz/model/ApiServer"
	"tiktok-demo/cmd/api/config"
	"tiktok-demo/cmd/api/pkg"
	Globalconsts "tiktok-demo/shared/consts"
	"tiktok-demo/shared/errno"
	"tiktok-demo/shared/kitex_gen/CommentServer"
	"tiktok-demo/shared/kitex_gen/RelationServer"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinCommentActionRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	token := c.Query("token")
	vid, err := strconv.ParseInt(c.Query("video_id"), 10, 64)
	if err != nil {
		respErr := errno.NewErrNo(errno.ParamErrCode, "video_id 不合法")
		hlog.Error("param video_id is invalid", respErr)
		pkg.SendCommentActionResponse(c, respErr)
		return
	}
	actionType, err := strconv.ParseInt(c.Query("action_type"), 10, 64)
	if err != nil || (actionType != 1 && actionType != 2) {
		respErr := errno.NewErrNo(errno.ParamErrCode, "action_type 不合法")
		hlog.Error("param action_type is invalid", respErr)
		pkg.SendCommentActionResponse(c, respErr)
		return
	}
	req.Token = token
	req.VideoId = vid
	req.ActionType = int32(actionType)

	if actionType == 1 {
		commentText := c.Query("comment_text")
		if commentText == "" {
			respErr := errno.NewErrNo(errno.ParamErrCode, "comment_text 不合法")
			hlog.Error("param comment_text is invalid", respErr)
			pkg.SendCommentActionResponse(c, respErr)
			return
		}
		req.CommentText = commentText
	} else if actionType == 2 {
		commentID, err := strconv.ParseInt(c.Query("comment_id"), 10, 64)
		if err != nil {
			respErr := errno.NewErrNo(errno.ParamErrCode, "comment_id 不合法")
			hlog.Error("param comment_id is invalid", respErr)
			pkg.SendCommentActionResponse(c, respErr)
			return
		}
		req.CommentId = commentID
	}

	user, _ := c.Get(Globalconsts.IdentityKey)
	respRpc, _ := config.GlobalCommentClient.CommentAction(ctx, &CommentServer.DouyinCommentActionRequest{
		UserId:      user.(*ApiServer.User).Id,
		VideoId:     req.VideoId,
		ActionType:  req.ActionType,
		CommentText: req.CommentText,
		CommentId:   req.CommentId,
	})
	if respRpc.BaseResp.StatusCode != errno.SuccessCode {
		respErr := errno.NewErrNo(respRpc.BaseResp.StatusCode, respRpc.BaseResp.StatusMsg)
		hlog.Error("Rpc comment action failed", respErr)
		pkg.SendCommentActionResponse(c, respErr)
		return
	}
	pkg.SendCommentActionResponse(c, respRpc)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var userId int64
	var req ApiServer.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	user, _ := c.Get(Globalconsts.IdentityKey)
	if user == nil {
		// default userId when not login
		userId = 0
	} else {
		userId = user.(*ApiServer.User).Id
	}

	commentListResp, _ := config.GlobalCommentClient.CommentList(ctx, &CommentServer.DouyinCommentListRequest{
		Token:   req.Token,
		VideoId: req.VideoId,
	})

	if commentListResp.BaseResp.StatusCode != errno.SuccessCode {
		respErr := errno.NewErrNo(commentListResp.BaseResp.StatusCode, commentListResp.BaseResp.StatusMsg)
		hlog.Error("Rpc comment list failed", respErr)
		pkg.SendCommentListResponse(c, respErr)
		return
	}

	for _, v := range commentListResp.CommentList {
		if userId == 0 {
			v.User.IsFollow = false
			continue
		}
		isFollow, _ := config.GlobalRelationClient.QueryRelation(ctx, &RelationServer.DouyinQueryRelationRequest{
			UserId:   userId,
			ToUserId: v.User.Id,
		})
		if isFollow.BaseResp.StatusCode != errno.SuccessCode {
			respErr := errno.NewErrNo(isFollow.BaseResp.StatusCode, isFollow.BaseResp.StatusMsg)
			hlog.Error("Rpc query relation failed", respErr)
			pkg.SendCommentListResponse(c, respErr)
			return
		}
		v.User.IsFollow = isFollow.IsFollow
	}
	pkg.SendCommentListResponse(c, commentListResp)
}
